"""
Run: snakemake -n --configfile snakemake_config.yml
"""


IDS = os.environ.get("QUERY_IDS", 'NC_045512').split()

# FYI: final rule -- output of all other jobs is passed to this dummy job
# as input to make sure all other jobs have completed successfully.
rule all:
    input:
        expand('alignments_{query}.out', query=IDS)

rule get_query:
    output:
        expand('{query}.fa', query=IDS)
    params:
        id = lambda wildcards, output: output[0][:-3]
    shell:
        """
        curl "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id={params.id}&rettype=fasta" > {output}
        """

rule pebble_scout:
    input: expand('{query}.fa', query=IDS)
    output: 'hits_{query}.txt'
    params:
        pebble_search_host = config['pebble']['host']
    shell:
        """
        /usr/local/bin/psearch_gcp.sh --host {params.pebble_search_host} {input} > {output}
        """

rule filter_pebble_hits:
    input: expand('hits_{query}.txt', query=IDS)
    output: 'filtered_hits_{query}.txt'
    params:
        min_score = config['pebble']['min_score']
    shell:
        """
        # TODO: apply cutoff
        cat {input} > {output}
        """

rule build_blast_db:
    output: expand('{query}.blast_db.{ext}', query=IDS, ext=['nsq', 'nin', 'nhr', 'ndb', 'nto', 'ntf', 'not'])
    input: expand('{query}.fa', query=IDS)
    params:
        id = lambda wildcards, input: input[0][:-3]
    shell:
        """
        makeblastdb -dbtype nucl -in {input} -out {params.id}.blast_db
        """

rule elastic_blast:
    output: expand('alignments_{query}.out', query=IDS)
    input:
        expand('{query}.blast_db.{ext}', query=IDS, ext=['nsq', 'nin', 'nhr', 'ndb', 'nto', 'ntf', 'not']),
        expand('filtered_hits_{query}.txt', query=IDS)
    params:
        blastdb_bucket = config['blastdb_bucket']
    shell:
        """
        # Move SRAs to the bucket
        gsutil -qm cp $target_blastdb.* gs://${blastdb_bucket}/$target_blastdb

        # ElasticBLAST
        # Documentation on results: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#results
        results_bucket=${1:-"gs://psss-team4/test-results-$USER"}
        export ELB_RESULTS=$results_bucket

        cat >$CFG <<EOF
        [cloud-provider]
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#gcp-project
        gcp-project = $ELB_GCP_PROJECT
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#gcp-region
        gcp-region = $ELB_GCP_REGION
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#gcp-zone
        gcp-zone = $ELB_GCP_ZONE

        # These two settings are needed because the GCP project doesn't have a 'default' network
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#gcp-network
        gcp-network = research
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#gcp-sub-network
        gcp-subnetwork = subnet-us-east4

        [cluster]
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#machine-type
        machine-type = n1-standard-32
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#number-of-worker-nodes
        num-nodes = 10
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#number-of-cpus
        num-cpus = FIXME

        [blast]
        # See documentation for supported programs: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#blast-program
        program = blastn
        # See documentation for using your own BLASTDB:
        # https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#blast-database
        # https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/tutorials/create-blastdb-metadata.html?highlight=create
        db = gs://${BLASTDB_BUCKET}/$target_blastdb
        # See documentation for supported formats: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#query-sequence-data
        queries = FIXME
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#memory-limit-for-blast-search 
        mem-limit = FIXME
        # Documentation: https://blast.ncbi.nlm.nih.gov/doc/elastic-blast/configuration.html#blast-options
        options = -outfmt '7 std staxids'
        EOF

        elastic-blast submit --cfg $CFG
        elastic-blast status
        """
